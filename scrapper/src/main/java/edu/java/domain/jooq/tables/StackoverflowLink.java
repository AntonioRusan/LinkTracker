/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.tables;


import edu.java.domain.jooq.DefaultSchema;
import edu.java.domain.jooq.Keys;
import edu.java.domain.jooq.tables.Link.LinkPath;
import edu.java.domain.jooq.tables.records.StackoverflowLinkRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StackoverflowLink extends TableImpl<StackoverflowLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>STACKOVERFLOW_LINK</code>
     */
    public static final StackoverflowLink STACKOVERFLOW_LINK = new StackoverflowLink();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<StackoverflowLinkRecord> getRecordType() {
        return StackoverflowLinkRecord.class;
    }

    /**
     * The column <code>STACKOVERFLOW_LINK.LINK_ID</code>.
     */
    public final TableField<StackoverflowLinkRecord, Long> LINK_ID = createField(DSL.name("LINK_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>STACKOVERFLOW_LINK.LAST_ANSWER_DATE</code>.
     */
    public final TableField<StackoverflowLinkRecord, OffsetDateTime> LAST_ANSWER_DATE = createField(DSL.name("LAST_ANSWER_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private StackoverflowLink(Name alias, Table<StackoverflowLinkRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private StackoverflowLink(Name alias, Table<StackoverflowLinkRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>STACKOVERFLOW_LINK</code> table reference
     */
    public StackoverflowLink(String alias) {
        this(DSL.name(alias), STACKOVERFLOW_LINK);
    }

    /**
     * Create an aliased <code>STACKOVERFLOW_LINK</code> table reference
     */
    public StackoverflowLink(Name alias) {
        this(alias, STACKOVERFLOW_LINK);
    }

    /**
     * Create a <code>STACKOVERFLOW_LINK</code> table reference
     */
    public StackoverflowLink() {
        this(DSL.name("STACKOVERFLOW_LINK"), null);
    }

    public <O extends Record> StackoverflowLink(Table<O> path, ForeignKey<O, StackoverflowLinkRecord> childPath, InverseForeignKey<O, StackoverflowLinkRecord> parentPath) {
        super(path, childPath, parentPath, STACKOVERFLOW_LINK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class StackoverflowLinkPath extends StackoverflowLink implements Path<StackoverflowLinkRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> StackoverflowLinkPath(Table<O> path, ForeignKey<O, StackoverflowLinkRecord> childPath, InverseForeignKey<O, StackoverflowLinkRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private StackoverflowLinkPath(Name alias, Table<StackoverflowLinkRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public StackoverflowLinkPath as(String alias) {
            return new StackoverflowLinkPath(DSL.name(alias), this);
        }

        @Override
        public StackoverflowLinkPath as(Name alias) {
            return new StackoverflowLinkPath(alias, this);
        }

        @Override
        public StackoverflowLinkPath as(Table<?> alias) {
            return new StackoverflowLinkPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<StackoverflowLinkRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_93;
    }

    @Override
    @NotNull
    public List<ForeignKey<StackoverflowLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_9);
    }

    private transient LinkPath _link;

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK</code> table.
     */
    public LinkPath link() {
        if (_link == null)
            _link = new LinkPath(this, Keys.CONSTRAINT_9, null);

        return _link;
    }

    @Override
    @NotNull
    public StackoverflowLink as(String alias) {
        return new StackoverflowLink(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public StackoverflowLink as(Name alias) {
        return new StackoverflowLink(alias, this);
    }

    @Override
    @NotNull
    public StackoverflowLink as(Table<?> alias) {
        return new StackoverflowLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public StackoverflowLink rename(String name) {
        return new StackoverflowLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public StackoverflowLink rename(Name name) {
        return new StackoverflowLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public StackoverflowLink rename(Table<?> name) {
        return new StackoverflowLink(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public StackoverflowLink where(Condition condition) {
        return new StackoverflowLink(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public StackoverflowLink where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public StackoverflowLink where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public StackoverflowLink where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public StackoverflowLink where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public StackoverflowLink where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public StackoverflowLink where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public StackoverflowLink where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public StackoverflowLink whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public StackoverflowLink whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
